name: Android Build & Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_release:
    # 使用最新的 Ubuntu 运行环境
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Java 环境 (JDK 17)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 缓存 Gradle 依赖
      # 加快后续构建速度
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: 授予 gradlew 执行权限
      # 在执行 chmod 前，先切换到包含 gradlew 的目录
      run: |
        cd Android-kotlin-Code
        chmod +x ./gradlew

    - name: 构建 Release APK
      # 使用 'working-directory' 参数在正确的目录中执行命令
      run: ./gradlew assembleRelease
      working-directory: Android-kotlin-Code
      
    - name: 查找生成的 APK 文件路径
      id: find_apk
      run: |
        # 查找最新的 Release APK 文件，并将其路径设置为输出变量
        APK_DIR="Android-kotlin-Code/build/outputs/apk/release/"
        # 找到第一个 .apk 文件
        APK_PATH=$(find $APK_DIR -name "*.apk" -type f | head -n 1)
        
        if [ -z "$APK_PATH" ]; then
          echo "::error::未找到 Release APK 文件。请检查构建步骤是否成功。"
          exit 1
        fi
        
        echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        # 使用标签名作为 Release 名称
        name: Release ${{ github.ref_name }}
        # 将 APK 文件作为附件上传
        files: ${{ steps.find_apk.outputs.APK_PATH }}
      env:
        # GITHUB_TOKEN 是 GitHub Actions 默认提供的权限令牌
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
